{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Main client logic.\n *\n * @module      block_precondition/main\n * @copyright   2024 David Herney @ BambuCo - https://bambuco.co\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Log from 'core/log';\nimport {get_strings as getStrings} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\n// Load strings.\nvar strings = [\n    {key: 'conditionstitle', component: 'block_precondition'},\n];\nvar s = [];\n\n/**\n * Load strings from server.\n *\n * @return {Promise} Promise that is resolved when the strings are loaded.\n */\nfunction loadStrings() {\n\n    strings.forEach(one => {\n        s[one.key] = one.key;\n    });\n\n    return new Promise((resolve) => {\n        getStrings(strings).then(function(results) {\n            var pos = 0;\n            strings.forEach(one => {\n                s[one.key] = results[pos];\n                pos++;\n            });\n\n            resolve(true);\n            return true;\n        }).fail(function(e) {\n            Log.debug('Error loading strings');\n            Log.debug(e);\n            return false;\n        });\n    });\n}\n// End of Load strings.\n\n/**\n * Initialize the component.\n *\n */\nexport const init = async() => {\n\n    var messages = [];\n    $('.block_precondition-message').each(function() {\n        var $message = $(this);\n        messages.push($message.html());\n    });\n\n    await loadStrings().catch(() => null);\n\n    var finalMessage = '<div class=\"block_precondition-message\">' + messages.join('<hr>') + '</div>';\n\n    ModalFactory.create({\n        type: ModalFactory.types.ALERT,\n        body: finalMessage,\n        title: s.conditionstitle,\n    })\n    .then(function(modal) {\n\n        // When the dialog is closed, perform the callback (if provided).\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            modal.getRoot().remove();\n        });\n\n        modal.show();\n\n        return modal;\n    })\n    .fail(function() {\n        Log.error('Error creating modal');\n    });\n\n};\n"],"names":["strings","key","component","s","async","messages","each","$message","this","push","html","forEach","one","Promise","resolve","then","results","pos","fail","e","debug","catch","finalMessage","join","create","type","ModalFactory","types","ALERT","body","title","conditionstitle","modal","getRoot","on","ModalEvents","hidden","remove","show","error"],"mappings":";;;;;;;0QA8BIA,QAAU,CACV,CAACC,IAAK,kBAAmBC,UAAW,uBAEpCC,EAAI,iBAoCYC,cAEZC,SAAW,uBACb,+BAA+BC,MAAK,eAC9BC,UAAW,mBAAEC,MACjBH,SAASI,KAAKF,SAASG,iBAhC3BV,QAAQW,SAAQC,MACZT,EAAES,IAAIX,KAAOW,IAAIX,OAGd,IAAIY,SAASC,+BACLd,SAASe,MAAK,SAASC,aAC1BC,IAAM,SACVjB,QAAQW,SAAQC,MACZT,EAAES,IAAIX,KAAOe,QAAQC,KACrBA,SAGJH,SAAQ,IACD,KACRI,MAAK,SAASC,uBACTC,MAAM,sCACNA,MAAMD,IACH,SAkBKE,OAAM,IAAM,WAE5BC,aAAe,2CAA6CjB,SAASkB,KAAK,QAAU,gCAE3EC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,MACzBC,KAAMP,aACNQ,MAAO3B,EAAE4B,kBAEZhB,MAAK,SAASiB,cAGXA,MAAMC,UAAUC,GAAGC,sBAAYC,QAAQ,WACnCJ,MAAMC,UAAUI,YAGpBL,MAAMM,OAECN,SAEVd,MAAK,wBACEqB,MAAM"}